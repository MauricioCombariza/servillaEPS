# docker-compose.yml
# Archivo de ejemplo para una configuración tipo producción.
# Render.com NO usa este archivo directamente, pero sirve como referencia.

version: '3.8'

services:
  # En producción, la base de datos debería ser un servicio gestionado (como el de Render).
  # Este servicio 'db' es solo para un ejemplo de despliegue autocontenido.
  db:
    image: postgres:15-alpine
    container_name: farmacia_db_prod
    env_file:
      - .env.prod # Usaría un archivo de entorno de producción
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/
    networks:
      - farmacia_net_prod
    # En producción, NO se recomienda exponer el puerto de la BD a internet.

  # Servicio del Backend FastAPI para producción
  backend:
    container_name: farmacia_backend_prod
    build:
      context: ./backend
      # Usa el Dockerfile por defecto (el de producción)
      dockerfile: Dockerfile 
    
    # El comando de inicio está definido dentro del Dockerfile con la instrucción CMD
    
    volumes:
      # En producción, el código está DENTRO de la imagen. No montamos el código local.
      # Solo montamos el volumen para los archivos subidos.
      - uploaded_files_prod:/app/uploads

    # No exponemos puertos directamente, un proxy inverso como Nginx se encargaría de eso.
    
    env_file:
      - .env.prod # Carga las variables de entorno de producción

    depends_on:
      - db
    networks:
      - farmacia_net_prod

volumes:
  postgres_data_prod:
  uploaded_files_prod:

networks:
  farmacia_net_prod:
    driver: bridge